#
# this program sums an array.
# the instr area and data area are 
# separated by a few nulls
#
# Algorithm:
# int array[NITEMS], RESULT;
# RESULT=0
# for (i=0;i<NITEMS;i++) RESULT += array[i];
#
# converted to
#
# for (i=NITEMS-1;i>=0;i--) RESULT += array[i];
#
# converted to
#  RESULT=0
#  i=NITEMS-1  // i is placed in ctr register
#  loop: if (i < 0) goto endloop;
#  RESULT += array[i]   
#  i--;
#  goto loop;
#  endloop:
#
# Here it is line by line:
#  RESULT=0
0xb000	# LA 0
0x2012	# STORE RESULT	# result set to zero
#  i=NITEMS-1  // i is placed in ctr
0xb001	# (current ADDR=2) LA 1
0x9011	# SUB NITEMS 
0x4000	# MVAC
#  if (i < 0) goto endloop;
0x600d	# loop: JLT END	
#  RESULT += array[i];
0xb013	# LA array	&array[0]
0x3000 	# ADDC		&array[ctr]
0xc000	# LIA		array[ctr]
0x8012	# ADD RESULT	accum = array[ctr] + RESULT
0x2012	# STORE RESULT	RESULT=accum
#  i--
0xa000	# (current ADDR=0xb) DECR
#  goto loop;
0x7005	# JMP loop
0x0	# endloop: halt
#
# the offset is 14(0xE) here. The data area starts
# at 0x11, so we need three pad words
# these come in handy if we need more instructions.
0x0000
0x0000
0x0000
#
# the data area: offset is 0x11
#
0x0008  # NITEMS: The number of elements
0x0000  # RESULT:
0x0004  # (ADDR=0x13)array[0]
0x0008  # array[1]
0x0010  # array[2]
0x0040  # array[3]
0xFFFD  # array[4]
0x0009  # array[5]
0xFEDC  # array[6]
0x0120  # array[7]
